import { AbstractAttachment } from './attachment';
import { Client, ConnectOptions, CreateDatabaseOptions, ExecuteOptions, ExecuteQueryOptions, FetchOptions, PrepareOptions, TransactionOptions } from '..';
/** AbstractClient implementation. */
export declare abstract class AbstractClient implements Client {
    connected: boolean;
    attachments: Set<AbstractAttachment>;
    /** Default connect options. */
    defaultConnectOptions: ConnectOptions;
    /** Set default create database options. */
    defaultCreateDatabaseOptions: CreateDatabaseOptions;
    /** Default transaction options. */
    defaultTransactionOptions: TransactionOptions;
    /** Default query's prepare options. */
    defaultPrepareOptions: PrepareOptions;
    /** Default query's execute options. */
    defaultExecuteOptions: ExecuteOptions;
    /** Default query's executeQuery options. */
    defaultExecuteQueryOptions: ExecuteQueryOptions;
    /** Default result set's fetch options. */
    defaultFetchOptions: FetchOptions;
    /** Disposes this client's resources. */
    dispose(): Promise<void>;
    /** Connects to a database. */
    connect(uri: string, options?: ConnectOptions): Promise<AbstractAttachment>;
    /** Creates a database. */
    createDatabase(uri: string, options?: CreateDatabaseOptions): Promise<AbstractAttachment>;
    get isValid(): boolean;
    private check;
    protected abstract internalDispose(): Promise<void>;
    protected abstract internalConnect(uri: string, options?: ConnectOptions): Promise<AbstractAttachment>;
    protected abstract internalCreateDatabase(uri: string, options?: CreateDatabaseOptions): Promise<AbstractAttachment>;
}
